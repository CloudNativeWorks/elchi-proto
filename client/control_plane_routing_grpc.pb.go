// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: client/control_plane_routing.proto

package client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EnvoyRoutingService_RegisterControlPlane_FullMethodName    = "/control_plane_routing.EnvoyRoutingService/RegisterControlPlane"
	EnvoyRoutingService_GetControlPlaneCluster_FullMethodName  = "/control_plane_routing.EnvoyRoutingService/GetControlPlaneCluster"
	EnvoyRoutingService_NotifySnapshotDelivered_FullMethodName = "/control_plane_routing.EnvoyRoutingService/NotifySnapshotDelivered"
	EnvoyRoutingService_UpdateNodeList_FullMethodName          = "/control_plane_routing.EnvoyRoutingService/UpdateNodeList"
	EnvoyRoutingService_ListControlPlanes_FullMethodName       = "/control_plane_routing.EnvoyRoutingService/ListControlPlanes"
	EnvoyRoutingService_ListNodesByControlPlane_FullMethodName = "/control_plane_routing.EnvoyRoutingService/ListNodesByControlPlane"
	EnvoyRoutingService_GetAllRegistryData_FullMethodName      = "/control_plane_routing.EnvoyRoutingService/GetAllRegistryData"
	EnvoyRoutingService_HealthCheck_FullMethodName             = "/control_plane_routing.EnvoyRoutingService/HealthCheck"
	EnvoyRoutingService_DeleteControlPlane_FullMethodName      = "/control_plane_routing.EnvoyRoutingService/DeleteControlPlane"
)

// EnvoyRoutingServiceClient is the client API for EnvoyRoutingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Envoy Routing Service
type EnvoyRoutingServiceClient interface {
	RegisterControlPlane(ctx context.Context, in *RegisterControlPlaneRequest, opts ...grpc.CallOption) (*RegisterControlPlaneResponse, error)
	GetControlPlaneCluster(ctx context.Context, in *GetControlPlaneClusterRequest, opts ...grpc.CallOption) (*GetControlPlaneClusterResponse, error)
	// Control-plane snapshot verdi notification
	NotifySnapshotDelivered(ctx context.Context, in *NotifySnapshotDeliveredRequest, opts ...grpc.CallOption) (*NotifySnapshotDeliveredResponse, error)
	// Bulk node update (30sn'de bir)
	UpdateNodeList(ctx context.Context, in *UpdateNodeListRequest, opts ...grpc.CallOption) (*UpdateNodeListResponse, error)
	// List all control planes
	ListControlPlanes(ctx context.Context, in *ListControlPlanesRequest, opts ...grpc.CallOption) (*ListControlPlanesResponse, error)
	// List nodes by control plane
	ListNodesByControlPlane(ctx context.Context, in *ListNodesByControlPlaneRequest, opts ...grpc.CallOption) (*ListNodesByControlPlaneResponse, error)
	// Get all registry data for reporting
	GetAllRegistryData(ctx context.Context, in *GetAllRegistryDataRequest, opts ...grpc.CallOption) (*GetAllRegistryDataResponse, error)
	// Health check
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Delete control plane
	DeleteControlPlane(ctx context.Context, in *DeleteControlPlaneRequest, opts ...grpc.CallOption) (*DeleteControlPlaneResponse, error)
}

type envoyRoutingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvoyRoutingServiceClient(cc grpc.ClientConnInterface) EnvoyRoutingServiceClient {
	return &envoyRoutingServiceClient{cc}
}

func (c *envoyRoutingServiceClient) RegisterControlPlane(ctx context.Context, in *RegisterControlPlaneRequest, opts ...grpc.CallOption) (*RegisterControlPlaneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterControlPlaneResponse)
	err := c.cc.Invoke(ctx, EnvoyRoutingService_RegisterControlPlane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envoyRoutingServiceClient) GetControlPlaneCluster(ctx context.Context, in *GetControlPlaneClusterRequest, opts ...grpc.CallOption) (*GetControlPlaneClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetControlPlaneClusterResponse)
	err := c.cc.Invoke(ctx, EnvoyRoutingService_GetControlPlaneCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envoyRoutingServiceClient) NotifySnapshotDelivered(ctx context.Context, in *NotifySnapshotDeliveredRequest, opts ...grpc.CallOption) (*NotifySnapshotDeliveredResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotifySnapshotDeliveredResponse)
	err := c.cc.Invoke(ctx, EnvoyRoutingService_NotifySnapshotDelivered_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envoyRoutingServiceClient) UpdateNodeList(ctx context.Context, in *UpdateNodeListRequest, opts ...grpc.CallOption) (*UpdateNodeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNodeListResponse)
	err := c.cc.Invoke(ctx, EnvoyRoutingService_UpdateNodeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envoyRoutingServiceClient) ListControlPlanes(ctx context.Context, in *ListControlPlanesRequest, opts ...grpc.CallOption) (*ListControlPlanesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListControlPlanesResponse)
	err := c.cc.Invoke(ctx, EnvoyRoutingService_ListControlPlanes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envoyRoutingServiceClient) ListNodesByControlPlane(ctx context.Context, in *ListNodesByControlPlaneRequest, opts ...grpc.CallOption) (*ListNodesByControlPlaneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNodesByControlPlaneResponse)
	err := c.cc.Invoke(ctx, EnvoyRoutingService_ListNodesByControlPlane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envoyRoutingServiceClient) GetAllRegistryData(ctx context.Context, in *GetAllRegistryDataRequest, opts ...grpc.CallOption) (*GetAllRegistryDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllRegistryDataResponse)
	err := c.cc.Invoke(ctx, EnvoyRoutingService_GetAllRegistryData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envoyRoutingServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, EnvoyRoutingService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envoyRoutingServiceClient) DeleteControlPlane(ctx context.Context, in *DeleteControlPlaneRequest, opts ...grpc.CallOption) (*DeleteControlPlaneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteControlPlaneResponse)
	err := c.cc.Invoke(ctx, EnvoyRoutingService_DeleteControlPlane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvoyRoutingServiceServer is the server API for EnvoyRoutingService service.
// All implementations must embed UnimplementedEnvoyRoutingServiceServer
// for forward compatibility.
//
// Envoy Routing Service
type EnvoyRoutingServiceServer interface {
	RegisterControlPlane(context.Context, *RegisterControlPlaneRequest) (*RegisterControlPlaneResponse, error)
	GetControlPlaneCluster(context.Context, *GetControlPlaneClusterRequest) (*GetControlPlaneClusterResponse, error)
	// Control-plane snapshot verdi notification
	NotifySnapshotDelivered(context.Context, *NotifySnapshotDeliveredRequest) (*NotifySnapshotDeliveredResponse, error)
	// Bulk node update (30sn'de bir)
	UpdateNodeList(context.Context, *UpdateNodeListRequest) (*UpdateNodeListResponse, error)
	// List all control planes
	ListControlPlanes(context.Context, *ListControlPlanesRequest) (*ListControlPlanesResponse, error)
	// List nodes by control plane
	ListNodesByControlPlane(context.Context, *ListNodesByControlPlaneRequest) (*ListNodesByControlPlaneResponse, error)
	// Get all registry data for reporting
	GetAllRegistryData(context.Context, *GetAllRegistryDataRequest) (*GetAllRegistryDataResponse, error)
	// Health check
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Delete control plane
	DeleteControlPlane(context.Context, *DeleteControlPlaneRequest) (*DeleteControlPlaneResponse, error)
	mustEmbedUnimplementedEnvoyRoutingServiceServer()
}

// UnimplementedEnvoyRoutingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEnvoyRoutingServiceServer struct{}

func (UnimplementedEnvoyRoutingServiceServer) RegisterControlPlane(context.Context, *RegisterControlPlaneRequest) (*RegisterControlPlaneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterControlPlane not implemented")
}
func (UnimplementedEnvoyRoutingServiceServer) GetControlPlaneCluster(context.Context, *GetControlPlaneClusterRequest) (*GetControlPlaneClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetControlPlaneCluster not implemented")
}
func (UnimplementedEnvoyRoutingServiceServer) NotifySnapshotDelivered(context.Context, *NotifySnapshotDeliveredRequest) (*NotifySnapshotDeliveredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifySnapshotDelivered not implemented")
}
func (UnimplementedEnvoyRoutingServiceServer) UpdateNodeList(context.Context, *UpdateNodeListRequest) (*UpdateNodeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeList not implemented")
}
func (UnimplementedEnvoyRoutingServiceServer) ListControlPlanes(context.Context, *ListControlPlanesRequest) (*ListControlPlanesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListControlPlanes not implemented")
}
func (UnimplementedEnvoyRoutingServiceServer) ListNodesByControlPlane(context.Context, *ListNodesByControlPlaneRequest) (*ListNodesByControlPlaneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodesByControlPlane not implemented")
}
func (UnimplementedEnvoyRoutingServiceServer) GetAllRegistryData(context.Context, *GetAllRegistryDataRequest) (*GetAllRegistryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRegistryData not implemented")
}
func (UnimplementedEnvoyRoutingServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedEnvoyRoutingServiceServer) DeleteControlPlane(context.Context, *DeleteControlPlaneRequest) (*DeleteControlPlaneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteControlPlane not implemented")
}
func (UnimplementedEnvoyRoutingServiceServer) mustEmbedUnimplementedEnvoyRoutingServiceServer() {}
func (UnimplementedEnvoyRoutingServiceServer) testEmbeddedByValue()                             {}

// UnsafeEnvoyRoutingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvoyRoutingServiceServer will
// result in compilation errors.
type UnsafeEnvoyRoutingServiceServer interface {
	mustEmbedUnimplementedEnvoyRoutingServiceServer()
}

func RegisterEnvoyRoutingServiceServer(s grpc.ServiceRegistrar, srv EnvoyRoutingServiceServer) {
	// If the following call pancis, it indicates UnimplementedEnvoyRoutingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EnvoyRoutingService_ServiceDesc, srv)
}

func _EnvoyRoutingService_RegisterControlPlane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterControlPlaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvoyRoutingServiceServer).RegisterControlPlane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvoyRoutingService_RegisterControlPlane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvoyRoutingServiceServer).RegisterControlPlane(ctx, req.(*RegisterControlPlaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvoyRoutingService_GetControlPlaneCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetControlPlaneClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvoyRoutingServiceServer).GetControlPlaneCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvoyRoutingService_GetControlPlaneCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvoyRoutingServiceServer).GetControlPlaneCluster(ctx, req.(*GetControlPlaneClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvoyRoutingService_NotifySnapshotDelivered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifySnapshotDeliveredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvoyRoutingServiceServer).NotifySnapshotDelivered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvoyRoutingService_NotifySnapshotDelivered_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvoyRoutingServiceServer).NotifySnapshotDelivered(ctx, req.(*NotifySnapshotDeliveredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvoyRoutingService_UpdateNodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvoyRoutingServiceServer).UpdateNodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvoyRoutingService_UpdateNodeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvoyRoutingServiceServer).UpdateNodeList(ctx, req.(*UpdateNodeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvoyRoutingService_ListControlPlanes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListControlPlanesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvoyRoutingServiceServer).ListControlPlanes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvoyRoutingService_ListControlPlanes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvoyRoutingServiceServer).ListControlPlanes(ctx, req.(*ListControlPlanesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvoyRoutingService_ListNodesByControlPlane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesByControlPlaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvoyRoutingServiceServer).ListNodesByControlPlane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvoyRoutingService_ListNodesByControlPlane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvoyRoutingServiceServer).ListNodesByControlPlane(ctx, req.(*ListNodesByControlPlaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvoyRoutingService_GetAllRegistryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRegistryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvoyRoutingServiceServer).GetAllRegistryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvoyRoutingService_GetAllRegistryData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvoyRoutingServiceServer).GetAllRegistryData(ctx, req.(*GetAllRegistryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvoyRoutingService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvoyRoutingServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvoyRoutingService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvoyRoutingServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvoyRoutingService_DeleteControlPlane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteControlPlaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvoyRoutingServiceServer).DeleteControlPlane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvoyRoutingService_DeleteControlPlane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvoyRoutingServiceServer).DeleteControlPlane(ctx, req.(*DeleteControlPlaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvoyRoutingService_ServiceDesc is the grpc.ServiceDesc for EnvoyRoutingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvoyRoutingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "control_plane_routing.EnvoyRoutingService",
	HandlerType: (*EnvoyRoutingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterControlPlane",
			Handler:    _EnvoyRoutingService_RegisterControlPlane_Handler,
		},
		{
			MethodName: "GetControlPlaneCluster",
			Handler:    _EnvoyRoutingService_GetControlPlaneCluster_Handler,
		},
		{
			MethodName: "NotifySnapshotDelivered",
			Handler:    _EnvoyRoutingService_NotifySnapshotDelivered_Handler,
		},
		{
			MethodName: "UpdateNodeList",
			Handler:    _EnvoyRoutingService_UpdateNodeList_Handler,
		},
		{
			MethodName: "ListControlPlanes",
			Handler:    _EnvoyRoutingService_ListControlPlanes_Handler,
		},
		{
			MethodName: "ListNodesByControlPlane",
			Handler:    _EnvoyRoutingService_ListNodesByControlPlane_Handler,
		},
		{
			MethodName: "GetAllRegistryData",
			Handler:    _EnvoyRoutingService_GetAllRegistryData_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _EnvoyRoutingService_HealthCheck_Handler,
		},
		{
			MethodName: "DeleteControlPlane",
			Handler:    _EnvoyRoutingService_DeleteControlPlane_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client/control_plane_routing.proto",
}
