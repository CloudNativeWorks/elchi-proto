// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: client/controller_forward.proto

package client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ControllerForwardService_ForwardRequest_FullMethodName = "/controller_forward.ControllerForwardService/ForwardRequest"
	ControllerForwardService_HealthCheck_FullMethodName    = "/controller_forward.ControllerForwardService/HealthCheck"
)

// ControllerForwardServiceClient is the client API for ControllerForwardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Controller Request Forwarding Service
type ControllerForwardServiceClient interface {
	// Forward REST request to another controller
	ForwardRequest(ctx context.Context, in *ForwardRequestRequest, opts ...grpc.CallOption) (*ForwardRequestResponse, error)
	// Health check
	HealthCheck(ctx context.Context, in *ForwardHealthCheckRequest, opts ...grpc.CallOption) (*ForwardHealthCheckResponse, error)
}

type controllerForwardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerForwardServiceClient(cc grpc.ClientConnInterface) ControllerForwardServiceClient {
	return &controllerForwardServiceClient{cc}
}

func (c *controllerForwardServiceClient) ForwardRequest(ctx context.Context, in *ForwardRequestRequest, opts ...grpc.CallOption) (*ForwardRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForwardRequestResponse)
	err := c.cc.Invoke(ctx, ControllerForwardService_ForwardRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerForwardServiceClient) HealthCheck(ctx context.Context, in *ForwardHealthCheckRequest, opts ...grpc.CallOption) (*ForwardHealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForwardHealthCheckResponse)
	err := c.cc.Invoke(ctx, ControllerForwardService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerForwardServiceServer is the server API for ControllerForwardService service.
// All implementations must embed UnimplementedControllerForwardServiceServer
// for forward compatibility.
//
// Controller Request Forwarding Service
type ControllerForwardServiceServer interface {
	// Forward REST request to another controller
	ForwardRequest(context.Context, *ForwardRequestRequest) (*ForwardRequestResponse, error)
	// Health check
	HealthCheck(context.Context, *ForwardHealthCheckRequest) (*ForwardHealthCheckResponse, error)
	mustEmbedUnimplementedControllerForwardServiceServer()
}

// UnimplementedControllerForwardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedControllerForwardServiceServer struct{}

func (UnimplementedControllerForwardServiceServer) ForwardRequest(context.Context, *ForwardRequestRequest) (*ForwardRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardRequest not implemented")
}
func (UnimplementedControllerForwardServiceServer) HealthCheck(context.Context, *ForwardHealthCheckRequest) (*ForwardHealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedControllerForwardServiceServer) mustEmbedUnimplementedControllerForwardServiceServer() {
}
func (UnimplementedControllerForwardServiceServer) testEmbeddedByValue() {}

// UnsafeControllerForwardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerForwardServiceServer will
// result in compilation errors.
type UnsafeControllerForwardServiceServer interface {
	mustEmbedUnimplementedControllerForwardServiceServer()
}

func RegisterControllerForwardServiceServer(s grpc.ServiceRegistrar, srv ControllerForwardServiceServer) {
	// If the following call pancis, it indicates UnimplementedControllerForwardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ControllerForwardService_ServiceDesc, srv)
}

func _ControllerForwardService_ForwardRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerForwardServiceServer).ForwardRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerForwardService_ForwardRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerForwardServiceServer).ForwardRequest(ctx, req.(*ForwardRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerForwardService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerForwardServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerForwardService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerForwardServiceServer).HealthCheck(ctx, req.(*ForwardHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ControllerForwardService_ServiceDesc is the grpc.ServiceDesc for ControllerForwardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControllerForwardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controller_forward.ControllerForwardService",
	HandlerType: (*ControllerForwardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForwardRequest",
			Handler:    _ControllerForwardService_ForwardRequest_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _ControllerForwardService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client/controller_forward.proto",
}
