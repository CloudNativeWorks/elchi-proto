syntax = "proto3";

package control_plane_routing;

option go_package = "github.com/CloudNativeWorks/elchi-proto/client";

import "google/protobuf/timestamp.proto";

// Envoy Routing Service
service EnvoyRoutingService {
  rpc RegisterControlPlane(RegisterControlPlaneRequest)
      returns (RegisterControlPlaneResponse);

  rpc GetControlPlaneCluster(GetControlPlaneClusterRequest)
      returns (GetControlPlaneClusterResponse);

  // Control-plane snapshot verdi notification
  rpc NotifySnapshotDelivered(NotifySnapshotDeliveredRequest)
      returns (NotifySnapshotDeliveredResponse);

  // Bulk node update (30sn'de bir)
  rpc UpdateNodeList(UpdateNodeListRequest) returns (UpdateNodeListResponse);

  // List all control planes
  rpc ListControlPlanes(ListControlPlanesRequest) returns (ListControlPlanesResponse);

  // List nodes by control plane
  rpc ListNodesByControlPlane(ListNodesByControlPlaneRequest) returns (ListNodesByControlPlaneResponse);

  // Get all registry data for reporting
  rpc GetAllRegistryData(GetAllRegistryDataRequest) returns (GetAllRegistryDataResponse);

  // Health check
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);

  // Delete control plane
  rpc DeleteControlPlane(DeleteControlPlaneRequest) returns (DeleteControlPlaneResponse);
}

// Control-plane kaydÄ±
message RegisterControlPlaneRequest {
  string control_plane_id = 1;
  string version = 2;
  google.protobuf.Timestamp timestamp = 3;
}

message RegisterControlPlaneResponse {
  bool success = 1;
  string message = 2;
}

// Envoy'dan routing request'i
message GetControlPlaneClusterRequest {
  string node_id = 1; // envoy-node-123
  string version = 2; // v1.2.1
  google.protobuf.Timestamp timestamp = 3;
}

message GetControlPlaneClusterResponse {
  bool found = 1;
  string control_plane_id = 2;
}

// Snapshot delivered notification
message NotifySnapshotDeliveredRequest {
  string control_plane_id = 1;
  string node_id = 2;
  string version = 3;
  google.protobuf.Timestamp timestamp = 4;
}

message NotifySnapshotDeliveredResponse {
  bool success = 1;
  string message = 2;
}

// Bulk node list update (30sn'de bir)
message UpdateNodeListRequest {
  string control_plane_id = 1;
  repeated NodeInfo nodes = 2;
  google.protobuf.Timestamp timestamp = 3;
}

message NodeInfo {
  string node_id = 1;
  string version = 2;
  google.protobuf.Timestamp last_seen = 3;
}

message UpdateNodeListResponse {
  bool success = 1;
  string message = 2;
  int32 updated_count = 3;
}

// Health check
message HealthCheckRequest { string service = 1; }

message HealthCheckResponse {
  bool healthy = 1;
  string message = 2;
  google.protobuf.Timestamp timestamp = 3;
}

// List control planes
message ListControlPlanesRequest {
  // Empty request
}

message ControlPlaneInfo {
  string control_plane_id = 1;
  string version = 2;
  google.protobuf.Timestamp last_seen = 3;
}

message ListControlPlanesResponse {
  repeated ControlPlaneInfo control_planes = 1;
}

// List nodes by control plane
message ListNodesByControlPlaneRequest {
  string control_plane_id = 1;
}

message ListNodesByControlPlaneResponse {
  repeated NodeInfo nodes = 1;
}

// Get all registry data
message GetAllRegistryDataRequest {
  // Empty request
}

message RegistryData {
  repeated ControlPlaneInfo control_planes = 1;
  map<string, NodesData> nodes_by_control_plane = 2;
}

message NodesData {
  repeated NodeInfo nodes = 1;
}

message GetAllRegistryDataResponse {
  RegistryData data = 1;
}

// Delete control plane
message DeleteControlPlaneRequest {
  string control_plane_id = 1;
}

message DeleteControlPlaneResponse {
  bool success = 1;
  string message = 2;
}