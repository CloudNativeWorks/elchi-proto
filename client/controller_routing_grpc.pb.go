// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: client/controller_routing.proto

package client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ControllerRoutingService_RegisterController_FullMethodName       = "/controller_routing.ControllerRoutingService/RegisterController"
	ControllerRoutingService_GetControllerCluster_FullMethodName     = "/controller_routing.ControllerRoutingService/GetControllerCluster"
	ControllerRoutingService_NotifyClientConnected_FullMethodName    = "/controller_routing.ControllerRoutingService/NotifyClientConnected"
	ControllerRoutingService_UpdateClientList_FullMethodName         = "/controller_routing.ControllerRoutingService/UpdateClientList"
	ControllerRoutingService_ListControllers_FullMethodName          = "/controller_routing.ControllerRoutingService/ListControllers"
	ControllerRoutingService_ListClientsByController_FullMethodName  = "/controller_routing.ControllerRoutingService/ListClientsByController"
	ControllerRoutingService_GetAllRegistryData_FullMethodName       = "/controller_routing.ControllerRoutingService/GetAllRegistryData"
	ControllerRoutingService_HealthCheck_FullMethodName              = "/controller_routing.ControllerRoutingService/HealthCheck"
	ControllerRoutingService_NotifyClientDisconnected_FullMethodName = "/controller_routing.ControllerRoutingService/NotifyClientDisconnected"
	ControllerRoutingService_DeleteController_FullMethodName         = "/controller_routing.ControllerRoutingService/DeleteController"
)

// ControllerRoutingServiceClient is the client API for ControllerRoutingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Controller Routing Service
type ControllerRoutingServiceClient interface {
	RegisterController(ctx context.Context, in *RegisterControllerRequest, opts ...grpc.CallOption) (*RegisterControllerResponse, error)
	GetControllerCluster(ctx context.Context, in *GetControllerClusterRequest, opts ...grpc.CallOption) (*GetControllerClusterResponse, error)
	// Controller client'覺 ald覺 notification
	NotifyClientConnected(ctx context.Context, in *NotifyClientConnectedRequest, opts ...grpc.CallOption) (*NotifyClientConnectedResponse, error)
	// Bulk client update (30sn'de bir)
	UpdateClientList(ctx context.Context, in *UpdateClientListRequest, opts ...grpc.CallOption) (*UpdateClientListResponse, error)
	// List all controllers
	ListControllers(ctx context.Context, in *ListControllersRequest, opts ...grpc.CallOption) (*ListControllersResponse, error)
	// List clients by controller
	ListClientsByController(ctx context.Context, in *ListClientsByControllerRequest, opts ...grpc.CallOption) (*ListClientsByControllerResponse, error)
	// Get all registry data for reporting
	GetAllRegistryData(ctx context.Context, in *GetAllControllerRegistryDataRequest, opts ...grpc.CallOption) (*GetAllControllerRegistryDataResponse, error)
	// Health check
	HealthCheck(ctx context.Context, in *ControllerHealthCheckRequest, opts ...grpc.CallOption) (*ControllerHealthCheckResponse, error)
	NotifyClientDisconnected(ctx context.Context, in *NotifyClientDisconnectedRequest, opts ...grpc.CallOption) (*NotifyClientDisconnectedResponse, error)
	// Delete controller
	DeleteController(ctx context.Context, in *DeleteControllerRequest, opts ...grpc.CallOption) (*DeleteControllerResponse, error)
}

type controllerRoutingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerRoutingServiceClient(cc grpc.ClientConnInterface) ControllerRoutingServiceClient {
	return &controllerRoutingServiceClient{cc}
}

func (c *controllerRoutingServiceClient) RegisterController(ctx context.Context, in *RegisterControllerRequest, opts ...grpc.CallOption) (*RegisterControllerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterControllerResponse)
	err := c.cc.Invoke(ctx, ControllerRoutingService_RegisterController_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerRoutingServiceClient) GetControllerCluster(ctx context.Context, in *GetControllerClusterRequest, opts ...grpc.CallOption) (*GetControllerClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetControllerClusterResponse)
	err := c.cc.Invoke(ctx, ControllerRoutingService_GetControllerCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerRoutingServiceClient) NotifyClientConnected(ctx context.Context, in *NotifyClientConnectedRequest, opts ...grpc.CallOption) (*NotifyClientConnectedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotifyClientConnectedResponse)
	err := c.cc.Invoke(ctx, ControllerRoutingService_NotifyClientConnected_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerRoutingServiceClient) UpdateClientList(ctx context.Context, in *UpdateClientListRequest, opts ...grpc.CallOption) (*UpdateClientListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateClientListResponse)
	err := c.cc.Invoke(ctx, ControllerRoutingService_UpdateClientList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerRoutingServiceClient) ListControllers(ctx context.Context, in *ListControllersRequest, opts ...grpc.CallOption) (*ListControllersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListControllersResponse)
	err := c.cc.Invoke(ctx, ControllerRoutingService_ListControllers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerRoutingServiceClient) ListClientsByController(ctx context.Context, in *ListClientsByControllerRequest, opts ...grpc.CallOption) (*ListClientsByControllerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClientsByControllerResponse)
	err := c.cc.Invoke(ctx, ControllerRoutingService_ListClientsByController_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerRoutingServiceClient) GetAllRegistryData(ctx context.Context, in *GetAllControllerRegistryDataRequest, opts ...grpc.CallOption) (*GetAllControllerRegistryDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllControllerRegistryDataResponse)
	err := c.cc.Invoke(ctx, ControllerRoutingService_GetAllRegistryData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerRoutingServiceClient) HealthCheck(ctx context.Context, in *ControllerHealthCheckRequest, opts ...grpc.CallOption) (*ControllerHealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ControllerHealthCheckResponse)
	err := c.cc.Invoke(ctx, ControllerRoutingService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerRoutingServiceClient) NotifyClientDisconnected(ctx context.Context, in *NotifyClientDisconnectedRequest, opts ...grpc.CallOption) (*NotifyClientDisconnectedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotifyClientDisconnectedResponse)
	err := c.cc.Invoke(ctx, ControllerRoutingService_NotifyClientDisconnected_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerRoutingServiceClient) DeleteController(ctx context.Context, in *DeleteControllerRequest, opts ...grpc.CallOption) (*DeleteControllerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteControllerResponse)
	err := c.cc.Invoke(ctx, ControllerRoutingService_DeleteController_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerRoutingServiceServer is the server API for ControllerRoutingService service.
// All implementations must embed UnimplementedControllerRoutingServiceServer
// for forward compatibility.
//
// Controller Routing Service
type ControllerRoutingServiceServer interface {
	RegisterController(context.Context, *RegisterControllerRequest) (*RegisterControllerResponse, error)
	GetControllerCluster(context.Context, *GetControllerClusterRequest) (*GetControllerClusterResponse, error)
	// Controller client'覺 ald覺 notification
	NotifyClientConnected(context.Context, *NotifyClientConnectedRequest) (*NotifyClientConnectedResponse, error)
	// Bulk client update (30sn'de bir)
	UpdateClientList(context.Context, *UpdateClientListRequest) (*UpdateClientListResponse, error)
	// List all controllers
	ListControllers(context.Context, *ListControllersRequest) (*ListControllersResponse, error)
	// List clients by controller
	ListClientsByController(context.Context, *ListClientsByControllerRequest) (*ListClientsByControllerResponse, error)
	// Get all registry data for reporting
	GetAllRegistryData(context.Context, *GetAllControllerRegistryDataRequest) (*GetAllControllerRegistryDataResponse, error)
	// Health check
	HealthCheck(context.Context, *ControllerHealthCheckRequest) (*ControllerHealthCheckResponse, error)
	NotifyClientDisconnected(context.Context, *NotifyClientDisconnectedRequest) (*NotifyClientDisconnectedResponse, error)
	// Delete controller
	DeleteController(context.Context, *DeleteControllerRequest) (*DeleteControllerResponse, error)
	mustEmbedUnimplementedControllerRoutingServiceServer()
}

// UnimplementedControllerRoutingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedControllerRoutingServiceServer struct{}

func (UnimplementedControllerRoutingServiceServer) RegisterController(context.Context, *RegisterControllerRequest) (*RegisterControllerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterController not implemented")
}
func (UnimplementedControllerRoutingServiceServer) GetControllerCluster(context.Context, *GetControllerClusterRequest) (*GetControllerClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetControllerCluster not implemented")
}
func (UnimplementedControllerRoutingServiceServer) NotifyClientConnected(context.Context, *NotifyClientConnectedRequest) (*NotifyClientConnectedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyClientConnected not implemented")
}
func (UnimplementedControllerRoutingServiceServer) UpdateClientList(context.Context, *UpdateClientListRequest) (*UpdateClientListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClientList not implemented")
}
func (UnimplementedControllerRoutingServiceServer) ListControllers(context.Context, *ListControllersRequest) (*ListControllersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListControllers not implemented")
}
func (UnimplementedControllerRoutingServiceServer) ListClientsByController(context.Context, *ListClientsByControllerRequest) (*ListClientsByControllerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClientsByController not implemented")
}
func (UnimplementedControllerRoutingServiceServer) GetAllRegistryData(context.Context, *GetAllControllerRegistryDataRequest) (*GetAllControllerRegistryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRegistryData not implemented")
}
func (UnimplementedControllerRoutingServiceServer) HealthCheck(context.Context, *ControllerHealthCheckRequest) (*ControllerHealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedControllerRoutingServiceServer) NotifyClientDisconnected(context.Context, *NotifyClientDisconnectedRequest) (*NotifyClientDisconnectedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyClientDisconnected not implemented")
}
func (UnimplementedControllerRoutingServiceServer) DeleteController(context.Context, *DeleteControllerRequest) (*DeleteControllerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteController not implemented")
}
func (UnimplementedControllerRoutingServiceServer) mustEmbedUnimplementedControllerRoutingServiceServer() {
}
func (UnimplementedControllerRoutingServiceServer) testEmbeddedByValue() {}

// UnsafeControllerRoutingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerRoutingServiceServer will
// result in compilation errors.
type UnsafeControllerRoutingServiceServer interface {
	mustEmbedUnimplementedControllerRoutingServiceServer()
}

func RegisterControllerRoutingServiceServer(s grpc.ServiceRegistrar, srv ControllerRoutingServiceServer) {
	// If the following call pancis, it indicates UnimplementedControllerRoutingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ControllerRoutingService_ServiceDesc, srv)
}

func _ControllerRoutingService_RegisterController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerRoutingServiceServer).RegisterController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerRoutingService_RegisterController_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerRoutingServiceServer).RegisterController(ctx, req.(*RegisterControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerRoutingService_GetControllerCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetControllerClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerRoutingServiceServer).GetControllerCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerRoutingService_GetControllerCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerRoutingServiceServer).GetControllerCluster(ctx, req.(*GetControllerClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerRoutingService_NotifyClientConnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyClientConnectedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerRoutingServiceServer).NotifyClientConnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerRoutingService_NotifyClientConnected_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerRoutingServiceServer).NotifyClientConnected(ctx, req.(*NotifyClientConnectedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerRoutingService_UpdateClientList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerRoutingServiceServer).UpdateClientList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerRoutingService_UpdateClientList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerRoutingServiceServer).UpdateClientList(ctx, req.(*UpdateClientListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerRoutingService_ListControllers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListControllersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerRoutingServiceServer).ListControllers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerRoutingService_ListControllers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerRoutingServiceServer).ListControllers(ctx, req.(*ListControllersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerRoutingService_ListClientsByController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientsByControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerRoutingServiceServer).ListClientsByController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerRoutingService_ListClientsByController_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerRoutingServiceServer).ListClientsByController(ctx, req.(*ListClientsByControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerRoutingService_GetAllRegistryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllControllerRegistryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerRoutingServiceServer).GetAllRegistryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerRoutingService_GetAllRegistryData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerRoutingServiceServer).GetAllRegistryData(ctx, req.(*GetAllControllerRegistryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerRoutingService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControllerHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerRoutingServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerRoutingService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerRoutingServiceServer).HealthCheck(ctx, req.(*ControllerHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerRoutingService_NotifyClientDisconnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyClientDisconnectedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerRoutingServiceServer).NotifyClientDisconnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerRoutingService_NotifyClientDisconnected_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerRoutingServiceServer).NotifyClientDisconnected(ctx, req.(*NotifyClientDisconnectedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerRoutingService_DeleteController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerRoutingServiceServer).DeleteController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerRoutingService_DeleteController_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerRoutingServiceServer).DeleteController(ctx, req.(*DeleteControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ControllerRoutingService_ServiceDesc is the grpc.ServiceDesc for ControllerRoutingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControllerRoutingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controller_routing.ControllerRoutingService",
	HandlerType: (*ControllerRoutingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterController",
			Handler:    _ControllerRoutingService_RegisterController_Handler,
		},
		{
			MethodName: "GetControllerCluster",
			Handler:    _ControllerRoutingService_GetControllerCluster_Handler,
		},
		{
			MethodName: "NotifyClientConnected",
			Handler:    _ControllerRoutingService_NotifyClientConnected_Handler,
		},
		{
			MethodName: "UpdateClientList",
			Handler:    _ControllerRoutingService_UpdateClientList_Handler,
		},
		{
			MethodName: "ListControllers",
			Handler:    _ControllerRoutingService_ListControllers_Handler,
		},
		{
			MethodName: "ListClientsByController",
			Handler:    _ControllerRoutingService_ListClientsByController_Handler,
		},
		{
			MethodName: "GetAllRegistryData",
			Handler:    _ControllerRoutingService_GetAllRegistryData_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _ControllerRoutingService_HealthCheck_Handler,
		},
		{
			MethodName: "NotifyClientDisconnected",
			Handler:    _ControllerRoutingService_NotifyClientDisconnected_Handler,
		},
		{
			MethodName: "DeleteController",
			Handler:    _ControllerRoutingService_DeleteController_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client/controller_routing.proto",
}
